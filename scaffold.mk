# Copyright (C) 2009 Nicholas Guiffrida

# this file should be included by the projects top level Makefile.  It
# defines the default build and clean targets

# check for required make features
ifeq ($(.FEATURES),)
$(error Scaffold requires the .FEATURES variable)
endif

ifeq ($(filter target-specific,$(.FEATURES)),)
$(error Scaffold requires target specific variables)
endif

ifeq ($(filter second-expansion,$(.FEATURES)),)
$(error Scaffold requires secondary expansion)
endif

ifeq ($(filter order-only,$(.FEATURES)),)
$(error Scaffold requires order only prerequisites)
endif

scaffold_dir := $(dir $(lastword $(MAKEFILE_LIST)))
include $(scaffold_dir)variables.mk
include $(scaffold_dir)attributes.mk
include $(scaffold_dir)commands.mk
include $(scaffold_dir)module-helper.mk
include $(scaffold_dir)modules.mk


# 1 = module path
define create_module_targets
$(eval include $(1))
$(call process_module_targets)
endef


.SECONDEXPANSION:
# create the targets
$(foreach module,$(modules),$(eval $(call create_module_targets,$(module))))

# clean_files: files to delete with the clean-files target

.PHONY: clean-build clean-targets clean-files clean-all programs libraries


ifneq ($(MAKECMDGOALS),clean)
-include $(dependencies)
endif

libraries: $(LIBRARIES)
programs: $(cxx_progs)


# cleans out all the files generated by the build including the object
# file directories
clean-build:
	rm -f $(object_files) $(dependencies)

# removes the targets
clean-targets:
	rm -f $(cxx_progs) $(LIBRARIES) $(shlib_clean)


# removes all the files specified in the clean_files variable
clean-files:
	$(if $(clean_files),rm -f $(clean_files),)

clean-all: clean-build clean-targets clean-files
